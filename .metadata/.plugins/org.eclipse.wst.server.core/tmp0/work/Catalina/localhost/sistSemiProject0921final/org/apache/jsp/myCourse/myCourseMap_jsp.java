/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-21 02:13:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.myCourse;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.dto.MemberDto;
import data.dao.MemberDao;
import data.dao.LikesDao;
import data.dto.TourSpotDto;
import data.dao.TourSpotDao;
import java.util.List;

public final class myCourseMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.MemberDao");
    _jspx_imports_classes.add("data.dao.LikesDao");
    _jspx_imports_classes.add("data.dto.TourSpotDto");
    _jspx_imports_classes.add("data.dto.MemberDto");
    _jspx_imports_classes.add("data.dao.TourSpotDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<link\r\n");
      out.write("   href=\"https://fonts.googleapis.com/css2?family=Black+Han+Sans&family=Dongle&family=Gugi&family=Orbit&display=swap\"\r\n");
      out.write("   rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("   href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"\r\n");
      out.write("   rel=\"stylesheet\">\r\n");
      out.write("   <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("<title>주소로 장소 표시하기</title>\r\n");
      out.write("<style>\r\n");
      out.write("@import url(//fonts.googleapis.com/earlyaccess/jejugothic.css);\r\n");
      out.write("\r\n");
      out.write("body * { \r\n");
      out.write(" font-family: 'Jeju Gothic', sans-serif;\r\n");
      out.write(" }\r\n");
      out.write("#spotContent {\r\n");
      out.write("   width: 200px;\r\n");
      out.write("}\r\n");
      out.write("#spottext{\r\n");
      out.write("   padding-left : 10px;\r\n");
      out.write("   /* background-color: #FFF0F5; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#map-container {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: flex-start;\r\n");
      out.write("    align-items: flex-start;\r\n");
      out.write("}\r\n");
      out.write("#map {\r\n");
      out.write("    /* width: 70%; */\r\n");
      out.write("    width:700px;\r\n");
      out.write("    height: 600px;\r\n");
      out.write("}\r\n");
      out.write("#placeInfo {\r\n");
      out.write("    /* width: 30%; */\r\n");
      out.write("    width:500px;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    margin-left: 20px; /* 오른쪽 여백 추가 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".placediv{\r\n");
      out.write("   border: 1px solid #ccc;\r\n");
      out.write("    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ul.nav-tabs{\r\n");
      out.write("   background-color:#fff5ee;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 기본 li 스타일 */\r\n");
      out.write("li.nav-item {\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: color 0.3s; /* 글자 색상 변화를 부드럽게 만들기 위한 트랜지션 설정 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#myCourseMain{\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   top:150px;\r\n");
      out.write("   left:250px;\r\n");
      out.write("   width:1400px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#themeTitle{\r\n");
      out.write("margin: 0 0 20px;\r\n");
      out.write("    font-weight: 800;\r\n");
      out.write("    font-size: 22px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("p{\r\n");
      out.write("color:#2C3E50;\r\n");
      out.write("font-size:15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");

      TourSpotDao tourSpotDao = new TourSpotDao(); 
      List<TourSpotDto> list = tourSpotDao.selectTourSpot();
      String root = request.getContextPath();
      
      String myid = (String)session.getAttribute("myid");
      
      MemberDao memberDao = new MemberDao();
      MemberDto memberDto = memberDao.getData(myid);
      
      LikesDao likesDao = new LikesDao();

   
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("//메뉴 클릭시 css\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("    // URL에서 selTheme 매개변수 값을 가져옵니다.\r\n");
      out.write("    var urlParams = new URLSearchParams(window.location.search);\r\n");
      out.write("    var selThemes = urlParams.get(\"selTheme\");\r\n");
      out.write("   //alert(selThemes);\r\n");
      out.write("    // 가져온 selTheme 값을 사용하여 해당 탭을 활성화합니다.\r\n");
      out.write("    if (selThemes) {\r\n");
      out.write("        $(\"#\" + selThemes).addClass(\"active\");\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("   $(\"#btnMap\").click(function(){\r\n");
      out.write("      location.href=\"");
      out.print(root);
      out.write("/index.jsp?main=myCourse/myCourseMap.jsp&selTheme=oceanTab\";\r\n");
      out.write("   });\r\n");
      out.write("   $(\"#btnList\").click(function(){\r\n");
      out.write("      location.href=\"");
      out.print(root);
      out.write("/index.jsp?main=myCourse/myCourseList.jsp\";\r\n");
      out.write("   });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"myCourseMain\">\r\n");
      out.write("<div class=\"btn-group\" style=\"margin-bottom:20px;\"><button type=\"button\" class=\"btn btn-outline-primary\" id=\"btnMap\">지도로 보기</button><button type=\"button\" class=\"btn btn-outline-primary\" id=\"btnList\">리스트로 보기</button></div>\r\n");
      out.write("<h4 id=\"themeTitle\">");
      out.print(memberDto.getName() );
      out.write("님 나만의 코스를 만들어 여행을 즐겨보세요.</h4>\r\n");
      out.write("<!-- Nav tabs -->\r\n");
      out.write("      <ul class=\"nav nav-tabs\" role=\"tablist\">\r\n");
      out.write("         <!-- <li class=\"nav-item\"><a class=\"nav-link active\"\r\n");
      out.write("            data-bs-toggle=\"tab\" href=\"#tabs-1\" onclick=\"selTheme('전체')\">전체</a></li> -->\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"oceanTab\" style=\"color:black;\">바다</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"olleTab\" style=\"color:black;\">올레길</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"mountainTab\" style=\"color:black;\">산</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"experienceTab\" style=\"color:black;\">체험</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"foodTab\" style=\"color:black;\">음식</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"lodgeTab\" style=\"color:black;\">숙박</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"shoppingTab\" style=\"color:black;\">쇼핑</a></li>\r\n");
      out.write("         <li class=\"nav-item\"><a class=\"nav-link\" data-bs-toggle=\"tab\" id=\"islandTab\" style=\"color:black;\">섬</a></li>\r\n");
      out.write("      </ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   <div id=\"map-container\">\r\n");
      out.write("   <div id=\"map\" style=\"width: 750px; height: 550px;\"></div>\r\n");
      out.write("\r\n");
      out.write("   <script type=\"text/javascript\"\r\n");
      out.write("      src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=a1f0da95f6b690783743a6d5efe0a18f&libraries=services\"></script>\r\n");
      out.write("   <script>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new kakao.maps.LatLng(33.38, 126.65), // 지도의 중심좌표\r\n");
      out.write("        level: 10 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("\r\n");
      out.write("// 지도를 생성합니다    \r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("// 주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write(" ");


String selTheme = request.getParameter("selTheme");
 //System.out.println(selTheme);
if(selTheme == null){
   selTheme = "";
}else if(selTheme.equals("oceanTab")){
   selTheme ="바다";
}else if(selTheme.equals("olleTab")){
   selTheme ="올레길";
}else if(selTheme.equals("mountainTab")){
   selTheme ="산";
}else if(selTheme.equals("experienceTab")){
   selTheme ="체험";
}else if(selTheme.equals("foodTab")){
   selTheme ="음식";
}else if(selTheme.equals("lodgeTab")){
   selTheme ="숙박";
}else if(selTheme.equals("shoppingTab")){
   selTheme ="쇼핑";
}else if(selTheme.equals("islandTab")){
   selTheme ="섬";
}

 
String str=null;
for (int i = 0; i < list.size(); i++) {
   TourSpotDto tourSpotDto = list.get(i);
   if(tourSpotDto.getMain_cat().equals(selTheme)){

      str = tourSpotDto.getAddr();
/*       System.out.println(selectTheme); */

      
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 주소로 좌표를 검색합니다\r\n");
      out.write("/* geocoder.addressSearch('제주특별자치도 제주시 첨단로 242', function(result, status) { */\r\n");
      out.write("geocoder.addressSearch('");
      out.print(str);
      out.write("', function(result, status) {\r\n");
      out.write("    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("\r\n");
      out.write("        // 결과값으로 받은 위치를 마커로 표시합니다\r\n");
      out.write("        var marker = new kakao.maps.Marker({\r\n");
      out.write("            map: map,\r\n");
      out.write("            position: coords\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        var selectedPlace = []; // 선택한 장소 정보를 저장할 배열\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        // 인포윈도우로 장소에 대한 설명을 표시합니다\r\n");
      out.write("        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("            content: \"<div id='spotContent'><img src='");
      out.print(root);
      out.write("/jeju/");
      out.print(tourSpotDto.getPhoto());
      out.write("' style='width:100%; height:70px'><div id='spottext'>");
      out.print(tourSpotDto.getName());
      out.write("<br>");
      out.print(tourSpotDto.getHp());
      out.write("</div></div>\"\r\n");
      out.write("                              });\r\n");
      out.write("                        //infowindow.open(map, marker);\r\n");
      out.write("\r\n");
      out.write("                        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n");
      out.write("                        //map.setCenter(coords);\r\n");
      out.write("\r\n");
      out.write("                        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n");
      out.write("                        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n");
      out.write("                        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n");
      out.write("                        kakao.maps.event.addListener(marker,\r\n");
      out.write("                              'mouseover', makeOverListener(map,\r\n");
      out.write("                                    marker, infowindow));\r\n");
      out.write("                        kakao.maps.event\r\n");
      out.write("                              .addListener(marker, 'mouseout',\r\n");
      out.write("                                    makeOutListener(infowindow));\r\n");
      out.write("\r\n");
      out.write("                        // 마커에 click 이벤트를 등록합니다\r\n");
      out.write("                         kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("                            \r\n");
      out.write("                            var spotName =   '");
      out.print(tourSpotDto.getName());
      out.write("';\r\n");
      out.write("                            var tour_seq = '");
      out.print(tourSpotDto.getSeq());
      out.write("';\r\n");
      out.write("                            var intro = \"");
      out.print(tourSpotDto.getIntro());
      out.write("\";\r\n");
      out.write("                            var photo = '");
      out.print(tourSpotDto.getPhoto());
      out.write("';\r\n");
      out.write("                            var myid = '");
      out.print(myid);
      out.write("';\r\n");
      out.write("                            selectedPlace.push(spotName); // 배열에 선택한 장소 이름 추가\r\n");
      out.write("\r\n");
      out.write("                                  \r\n");
      out.write("                              if(");
      out.print(likesDao.isLikeCheck(myid, Integer.parseInt(tourSpotDto.getSeq()))==1);
      out.write("){\r\n");
      out.write("                              $(\"#placeInfo\").html(\"<img src='");
      out.print(root);
      out.write("/jeju/");
      out.print(tourSpotDto.getPhoto());
      out.write("' style='width:100%; height:400px'><br><b>");
      out.print(tourSpotDto.getName());
      out.write("</b>&nbsp;&nbsp;<i class='bi bi-heart-fill like' style='color:red'></i><br><p>");
      out.print(tourSpotDto.getIntro());
      out.write("<br>");
      out.print(tourSpotDto.getAddr());
      out.write("&nbsp;/&nbsp;");
      out.print(tourSpotDto.getHp());
      out.write("<br></p>\"+\r\n");
      out.write("                                    \"<button type='button' id='btntouradd' class='btn btn-info'>추가하기</button> \");\r\n");
      out.write("                              }else{\r\n");
      out.write("                                 $(\"#placeInfo\").html(\"<img src='");
      out.print(root);
      out.write("/jeju/");
      out.print(tourSpotDto.getPhoto());
      out.write("' style='width:100%; height:400px'><br><b>");
      out.print(tourSpotDto.getName());
      out.write("</b>&nbsp;&nbsp;<i class='bi bi-heart-fill like'></i><br><p>");
      out.print(tourSpotDto.getIntro());
      out.write("<br>");
      out.print(tourSpotDto.getAddr());
      out.write("&nbsp;/&nbsp;");
      out.print(tourSpotDto.getHp());
      out.write("<br></p>\"+\r\n");
      out.write("                                 \"<button type='button' id='btntouradd' class='btn btn-info'>추가하기</button> \");\r\n");
      out.write("                              }\r\n");
      out.write("                               /* $(\"#placeInfo\").addClass(\"placediv\"); */\r\n");
      out.write("                              \r\n");
      out.write("                              $(\"#btntouradd\").click(function(){\r\n");
      out.write("                                 var yes = confirm(\"장소를 추가하시겠습니까?\");\r\n");
      out.write("                                  \r\n");
      out.write("                                 if(yes){\r\n");
      out.write("                                     \r\n");
      out.write("                                    //테이블에 장소를 추가하기 위해 db temp테이블에 장소 추가\r\n");
      out.write("                                    $.ajax({\r\n");
      out.write("                                               type: \"POST\",\r\n");
      out.write("                                               url: \"myCourse/insertTemp.jsp\", // 서버로 데이터를 전송할 주소 설정\r\n");
      out.write("                                               data: {spotName: spotName, tour_seq:tour_seq, intro:intro, photo:photo }, // 선택한 장소 데이터를 전송\r\n");
      out.write("                                               success: function(response) {\r\n");
      out.write("                                                  //alert(\"장소가 성공적으로 추가되었습니다.\");\r\n");
      out.write("                                             console.log(\"장소가 성공적으로 추가되었습니다.\");\r\n");
      out.write("                                             location.reload();\r\n");
      out.write("                                               },\r\n");
      out.write("                                               error: function(error) {\r\n");
      out.write("                                                   alert(\"장소 추가 중 오류가 발생했습니다.\");\r\n");
      out.write("                                               }\r\n");
      out.write("                                           });\r\n");
      out.write("                                 // 테이블에 선택한 장소를 추가하는 함수 호출\r\n");
      out.write("                                     //updateSelectedPlacesTable(selectedPlace);\r\n");
      out.write("                                 }\r\n");
      out.write("                              });\r\n");
      out.write("                               \r\n");
      out.write("                              $(document).on(\"click\", \"i.like\", function() {\r\n");
      out.write("                                   var currentColor = $(this).css(\"color\");\r\n");
      out.write("                                   \r\n");
      out.write("                                   \r\n");
      out.write("                                   if (currentColor === \"rgb(255, 0, 0)\") {\r\n");
      out.write("                                       // 현재 색상이 빨간색인 경우 검은색으로 변경합니다.\r\n");
      out.write("                                       $(this).css(\"color\", \"black\");\r\n");
      out.write("                                       $.ajax({\r\n");
      out.write("                                          type: \"get\",\r\n");
      out.write("                                         url: \"myCourse/likes.jsp\",\r\n");
      out.write("                                         data: {tour_seq:tour_seq, myid:myid},\r\n");
      out.write("                                         success: function(data) {\r\n");
      out.write("                                          console.log(\"좋아요클릭\");\r\n");
      out.write("                                            \r\n");
      out.write("                                         }\r\n");
      out.write("                                       })\r\n");
      out.write("                                       \r\n");
      out.write("                                       \r\n");
      out.write("                                   } else {\r\n");
      out.write("                                       // 현재 색상이 빨간색이 아닌 경우 빨간색으로 변경합니다.\r\n");
      out.write("                                       $(this).css(\"color\", \"red\");\r\n");
      out.write("                                       $.ajax({\r\n");
      out.write("                                          type: \"get\",\r\n");
      out.write("                                         url: \"myCourse/likes.jsp\",\r\n");
      out.write("                                         data: {tour_seq:tour_seq, myid:myid},\r\n");
      out.write("                                         success: function(data) {\r\n");
      out.write("                                          console.log(\"좋아요클릭\");\r\n");
      out.write("                                            \r\n");
      out.write("                                         }\r\n");
      out.write("                                       })\r\n");
      out.write("                                   }\r\n");
      out.write("                               }); \r\n");
      out.write("                              \r\n");
      out.write("                              \r\n");
      out.write("                              \r\n");
      out.write("                               /* $(\"#btncourseadd\").click(function(){\r\n");
      out.write("\r\n");
      out.write("                                  var courseName = $(\"#courseName\").val();\r\n");
      out.write("                                  var cnameText = $(\"span.cnamesuccess\").text();\r\n");
      out.write("\r\n");
      out.write("                                     if(courseName==\"\"){\r\n");
      out.write("                                        alert(\"코스 이름을 입력해주세요!\");\r\n");
      out.write("                                     }else if(cnameText!=\"사용 가능한 코스이름입니다\"){\r\n");
      out.write("                                        alert(\"중복 체크를 완료해주세요!\");\r\n");
      out.write("                                     }\r\n");
      out.write("\r\n");
      out.write("                                     else if(courseName!=\"\"&&cnameText==\"사용 가능한 코스이름입니다\"){\r\n");
      out.write("                                        var courseName = $(\"#courseName\").val();\r\n");
      out.write("                                       \r\n");
      out.write("                                           // 서버로 선택한 장소 데이터를 전송\r\n");
      out.write("                                           $.ajax({\r\n");
      out.write("                                               type: \"POST\",\r\n");
      out.write("                                               url: \"myCourse/insertMap.jsp\", // 서버로 데이터를 전송할 주소 설정\r\n");
      out.write("                                               data: {courseName: courseName, spotName: spotName }, // 선택한 장소 데이터를 전송\r\n");
      out.write("                                               success: function(response) {\r\n");
      out.write("                                                  //alert(\"장소가 성공적으로 추가되었습니다.\");\r\n");
      out.write("                                       \r\n");
      out.write("                                                   var tableBody = document.querySelector('#selectedPlacesTable tbody');\r\n");
      out.write("                                                   tableBody.innerHTML = ''; // 기존 테이블 내용 초기화\r\n");
      out.write("                                                   \r\n");
      out.write("                                                // 코스 저장 후 courseName 입력란을 비움\r\n");
      out.write("                                                   $(\"#courseName\").val(\"\"); // 입력란을 비워줍니다.\r\n");
      out.write("                                                  \r\n");
      out.write("                                               },\r\n");
      out.write("                                               error: function(error) {\r\n");
      out.write("                                                   alert(\"장소 추가 중 오류가 발생했습니다.\");\r\n");
      out.write("                                               }\r\n");
      out.write("                                           });\r\n");
      out.write("                                     \r\n");
      out.write("                                  \r\n");
      out.write("                                     }\r\n");
      out.write("                             \r\n");
      out.write("                              });  */\r\n");
      out.write("                              \r\n");
      out.write("                              \r\n");
      out.write("                            \r\n");
      out.write("                         });\r\n");
      out.write("                        \r\n");
      out.write("                        \r\n");
      out.write("                      \r\n");
      out.write("                        \r\n");
      out.write("                        \r\n");
      out.write("                      // 선택한 장소를 테이블에 추가하는 함수\r\n");
      out.write("                         /* function updateSelectedPlacesTable(selectedPlaceArray) {\r\n");
      out.write("                             var tableBody = document.querySelector('#selectedPlacesTable tbody');\r\n");
      out.write("                             //tableBody.innerHTML = ''; // 기존 테이블 내용 초기화\r\n");
      out.write("\r\n");
      out.write("                             for (var i = 0; i < selectedPlaceArray.length; i++) {\r\n");
      out.write("                                 var spotName = selectedPlaceArray[i];\r\n");
      out.write("                                 var row = tableBody.insertRow(-1); // -1을 사용하여 가장 아래에 행을 추가합니다.\r\n");
      out.write("                                 var cell = row.insertCell(0);\r\n");
      out.write("                                 cell.textContent = spotName;\r\n");
      out.write("                             }\r\n");
      out.write("                             \r\n");
      out.write("                          \r\n");
      out.write("                         } */\r\n");
      out.write("                     }\r\n");
      out.write("                  });\r\n");
      out.write("   ");
}}
      out.write("  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <script>\r\n");
      out.write("      \r\n");
      out.write("      //인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n");
      out.write("      function makeOverListener(map, marker, infowindow) {\r\n");
      out.write("         return function() {\r\n");
      out.write("            infowindow.open(map, marker);\r\n");
      out.write("         };\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n");
      out.write("      function makeOutListener(infowindow) {\r\n");
      out.write("         return function() {\r\n");
      out.write("            infowindow.close();\r\n");
      out.write("         };\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      //코스이름 중복 체크\r\n");
      out.write("      /* $(document).on(\"click\", \"#btnCname\", function() {\r\n");
      out.write("          var courseName = $(\"#courseName\").val();\r\n");
      out.write("\r\n");
      out.write("          $.ajax({\r\n");
      out.write("              type: \"get\",\r\n");
      out.write("              url: \"myCourse/cnameSearch.jsp\",\r\n");
      out.write("              dataType: \"json\",\r\n");
      out.write("              data: { \"courseName\": courseName },\r\n");
      out.write("              success: function(data) {\r\n");
      out.write("\r\n");
      out.write("                 if (data.count >= 1) {\r\n");
      out.write("                      $(\"span.cnameSuccess\").text(\"이미 존재하는 코스이름입니다\");\r\n");
      out.write("                      $(\"#courseName\").val(\"\");\r\n");
      out.write("                  } else {\r\n");
      out.write("                      $(\"span.cnameSuccess\").text(\"사용 가능한 코스이름입니다\");\r\n");
      out.write("                  }\r\n");
      out.write("              }\r\n");
      out.write("          });\r\n");
      out.write("      }); */\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("           // 각 탭에 대한 클릭 이벤트 처리\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("               $(\".nav-link\").click(function(event) {\r\n");
      out.write("                \r\n");
      out.write("            \r\n");
      out.write("                // 이제 원하는 동작 수행 (예: 페이지 내용 로드 또는 지도 업데이트 등)\r\n");
      out.write("                var theme = $(this).attr(\"id\"); // 클릭한 탭의 ID를 가져옴\r\n");
      out.write("                \r\n");
      out.write("                loadPlaces(theme);\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("          // 관광지 데이터 불러오기\r\n");
      out.write("          function loadPlaces(theme) {\r\n");
      out.write("             \r\n");
      out.write("             location.href = \"myCourse/selectTheme.jsp?selTheme=\"+theme;\r\n");
      out.write("\r\n");
      out.write("          }\r\n");
      out.write("          \r\n");
      out.write("\r\n");
      out.write("          \r\n");
      out.write("      \r\n");
      out.write("   </script>\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("   <div id=\"placeInfo\" class=\"placediv\" style=\"margin-right:20px;\">\r\n");
      out.write("      <img src='");
      out.print(root);
      out.write("/jeju/maininfo.png' style='width:100%; height:400px'><br><br><p>제주도의 다양한 관광지를 만나보세요 :)</p>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("   \r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "selectTable.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
