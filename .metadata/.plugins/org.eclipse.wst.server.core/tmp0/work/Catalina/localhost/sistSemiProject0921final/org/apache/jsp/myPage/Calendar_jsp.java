/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-21 01:45:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.myPage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.dto.MemberDto;
import data.dao.MemberDao;
import java.time.format.DateTimeFormatter;
import java.time.LocalTime;
import java.time.LocalDate;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public final class Calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.dao.MemberDao");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.LocalTime");
    _jspx_imports_classes.add("data.dto.MemberDto");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\">\r\n");
      out.write("<title>나의 일정</title>\r\n");

	request.setCharacterEncoding("utf-8");

	Calendar cal = Calendar.getInstance();
	
	// 시스템 오늘날짜
	int ty = cal.get(Calendar.YEAR);
	int tm = cal.get(Calendar.MONTH)+1;
	int td = cal.get(Calendar.DATE);
	
	int year = cal.get(Calendar.YEAR);
	int month = cal.get(Calendar.MONTH)+1;
	
	// 파라미터 받기
	String sy = request.getParameter("year");
	String sm = request.getParameter("month");
	
	if(sy!=null) { // 넘어온 파라미터가 있으면
		year = Integer.parseInt(sy);
	}
	if(sm!=null) {
		month = Integer.parseInt(sm);
	}
	
	cal.set(year, month-1, 1);
	year = cal.get(Calendar.YEAR);
	month = cal.get(Calendar.MONTH)+1;
	
	int week = cal.get(Calendar.DAY_OF_WEEK); // 1(일)~7(토)

      out.write("<link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("@import url(//fonts.googleapis.com/earlyaccess/jejugothic.css);\r\n");
      out.write("body * { \r\n");
      out.write(" font-family: 'Jeju Gothic', sans-serif;\r\n");
      out.write(" background-color: \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("*{\r\n");
      out.write("	margin: 0; padding: 0;\r\n");
      out.write("    box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	font-family: \"맑은 고딕\", 나눔고딕, 돋움, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("a {\r\n");
      out.write("  color: #000;\r\n");
      out.write("  text-decoration: none;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("a:active, a:hover {\r\n");
      out.write("	text-decoration: underline;\r\n");
      out.write("	color: #F28011;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar {\r\n");
      out.write("  width: 250px;\r\n");
      out.write("  height:250px;\r\n");
      out.write("  margin-top: 110px;\r\n");
      out.write("  margin-left: 300px;\r\n");
      out.write("  \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar .title1{\r\n");
      out.write("	height: 38px;\r\n");
      out.write("	line-height: 20px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size:18px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar .selectField {\r\n");
      out.write("	border: 1px solid #999;\r\n");
      out.write("	padding: 2px 7px;\r\n");
      out.write("	border-radius: 3px;\r\n");
      out.write("	font-family: \"맑은 고딕\", 나눔고딕, 돋움, sans-serif;\r\n");
      out.write("	vertical-align: baseline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar table {\r\n");
      out.write("	width: 150px;\r\n");
      out.write("	height:150px;\r\n");
      out.write("	border-collapse: collapse;\r\n");
      out.write("	border-spacing: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar table thead tr:first-child{\r\n");
      out.write("	background: #f6f6f6;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar table td{\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar table td:nth-child(7n+1){\r\n");
      out.write("	color: red;\r\n");
      out.write("}\r\n");
      out.write(".calendar table td:nth-child(7n){\r\n");
      out.write("	color: blue;\r\n");
      out.write("}\r\n");
      out.write(".calendar table td.gray {\r\n");
      out.write("	color: #ccc;\r\n");
      out.write("}\r\n");
      out.write(".calendar table td.today{\r\n");
      out.write("	font-weight:700;\r\n");
      out.write("	background: #E6FFFF;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".calendar .footer{\r\n");
      out.write("	height: 25px;\r\n");
      out.write("	line-height: 25px;\r\n");
      out.write("	text-align: right;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button {\r\n");
      out.write("  background: #3D4C53;\r\n");
      out.write("  margin : 20px auto;\r\n");
      out.write("  width : 180px;\r\n");
      out.write("  height : 35px;\r\n");
      out.write("  overflow: hidden;\r\n");
      out.write("  text-align : center;\r\n");
      out.write("  transition : .2s;\r\n");
      out.write("  cursor : pointer;\r\n");
      out.write("  border-radius: 3px;\r\n");
      out.write("  box-shadow: 0px 1px 2px rgba(0,0,0,.2);\r\n");
      out.write("}\r\n");
      out.write(".btnTwo {\r\n");
      out.write("  position : relative;\r\n");
      out.write("  width : 200px;\r\n");
      out.write("  height : 100px;\r\n");
      out.write("  margin-top: -100px;\r\n");
      out.write("  padding-top: 2px;\r\n");
      out.write("  background : #26A69A;\r\n");
      out.write("  left : -250px;\r\n");
      out.write("  transition : .3s;\r\n");
      out.write("}\r\n");
      out.write(".btnText {\r\n");
      out.write("  color : white;\r\n");
      out.write("  transition : .3s;\r\n");
      out.write("}\r\n");
      out.write(".btnText2 {\r\n");
      out.write("  margin-top : 63px;\r\n");
      out.write("  margin-right : -130px;\r\n");
      out.write("  color : #FFF;\r\n");
      out.write("}\r\n");
      out.write(".button:hover .btnTwo{ /*When hovering over .button change .btnTwo*/\r\n");
      out.write("  left: -130px;\r\n");
      out.write("}\r\n");
      out.write(".button:hover .btnText{ /*When hovering over .button change .btnText*/\r\n");
      out.write("  margin-left : 65px;\r\n");
      out.write("}\r\n");
      out.write(".button:active { /*Clicked and held*/\r\n");
      out.write("  box-shadow: 0px 5px 6px rgba(0,0,0,0.3);\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");

String loginok = (String)session.getAttribute("loginok");
String myid =(String)session.getAttribute("myid");

MemberDao dao = new MemberDao();
String name = dao.getName(myid);


      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("	\r\n");
      out.write("	$(\"#content\").hide();\r\n");
      out.write("	$(\"#save\").hide();\r\n");
      out.write("\r\n");
      out.write("	$(\"#btnadd\").click(function(){\r\n");
      out.write("		$(\"#content\").toggle();\r\n");
      out.write("		$(\"#save\").toggle(); \r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function change() {\r\n");
      out.write("	var f = document.frm;\r\n");
      out.write("	f.action=\"calendar2.jsp\";\r\n");
      out.write("	f.submit();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"a\" style=\"margin-top:120px; margin-left:300px; width:350px;\">\r\n");



if(loginok!=null) {

      out.write("<b style=\"font-size: 18px; text-decoration: underline;\">♥");
      out.print(name );
      out.write("♥</b><b> 님이 로그인 중 입니다 </b><br>\r\n");
	
} else {

      out.write("<li><a href=\"index.jsp?main=login/logoutaction.jsp\" style=\"width: 150px; margin-left: 15px; font-size: 14px;\">로그아웃</a>\r\n");

}

      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"calendar\">	\r\n");
      out.write("	<div class=\"title1\">\r\n");
      out.write("		<a href=\"calendar.jsp?year=");
      out.print(year);
      out.write("&month=");
      out.print(month-1);
      out.write("\">&lt;</a>\r\n");
      out.write("		<label><i class=\"bi bi-calendar-check\">&nbsp;</i>");
      out.print(year);
      out.write('년');
      out.write(' ');
      out.print(month);
      out.write("월</label>\r\n");
      out.write("		<a href=\"calendar.jsp?year=");
      out.print(year);
      out.write("&month=");
      out.print(month+1);
      out.write("\">&gt;</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<table>\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>일</td>\r\n");
      out.write("				<td>월</td>\r\n");
      out.write("				<td>화</td>\r\n");
      out.write("				<td>수</td>\r\n");
      out.write("				<td>목</td>\r\n");
      out.write("				<td>금</td>\r\n");
      out.write("				<td>토</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");

			// 1일 앞 달
			Calendar preCal = (Calendar)cal.clone();
			preCal.add(Calendar.DATE, -(week-1));
			int preDate = preCal.get(Calendar.DATE);
			
			out.print("<tr>");
			// 1일 앞 부분
			for(int i=1; i<week; i++) {
				//out.print("<td>&nbsp;</td>");
				out.print("<td class='gray'>"+(preDate++)+"</td>");
			}
			
			// 1일부터 말일까지 출력
			int lastDay = cal.getActualMaximum(Calendar.DATE);
			String cls;
			for(int i=1; i<=lastDay; i++) {
				cls = year==ty && month==tm && i==td ? "today":"";
				
				out.print("<td class='"+cls+"'>"+i+"</td>");
				if(lastDay != i && (++week)%7 == 1) {
					out.print("</tr><tr>");
				}
			}
			
			// 마지막 주 마지막 일자 다음 처리
			int n = 1;
			for(int i = (week-1)%7; i<6; i++) {
				// out.print("<td>&nbsp;</td>");
				out.print("<td class='gray'>"+(n++)+"</td>");
			}
			out.print("</tr>");

      out.write("</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		<table class=\"table table-bordered addtext\" style=\"width:256px; height:40px;\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><button type=\"button\" class=\"btn btn-outline-dark\" style=\"width:100px; height:30px; border:none;\" id=\"btnadd\">일정 메모</button></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	");

    LocalDate now = LocalDate.now();
	LocalTime now1 = LocalTime.now();
	
	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH시 mm분 ss초");
	String formatednow = now1.format(formatter);
	
	MemberDto dto = new MemberDto();
	
    
      out.write("<input type=\"hidden\" name=\"id\" value=\"");
      out.print(dto.getId() );
      out.write("\">\r\n");
      out.write("		<textarea style=\"text-align:left; width:256px; height:300px;\" name=\"content\" id=\"content\" style=\"border-radius:20px; font-size:15px;\">\r\n");
      out.write("		제목 : \r\n");
      out.write("		</textarea>\r\n");
      out.write("		<button type=\"submit\" id=\"save\"  class=\"btn btn-outline-dark\" style=\"width: 80px; height: 40px;\">저장</button>\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</div> <!-- Calendar 닫는 div -->\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(\"#save\").click(function(){\r\n");
      out.write("	\r\n");
      out.write("	var inputData = $(\"#content\").val();\r\n");
      out.write("	//alert(inputData);\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("        type: \"POST\", // HTTP 요청 방식 (POST)\r\n");
      out.write("        url: \"myList/listinsertproc.jsp\", // 데이터를 처리할 서버 스크립트 경로\r\n");
      out.write("        dataType:\"html\",\r\n");
      out.write("        data: { content: inputData },  // 전송할 데이터\r\n");
      out.write("        success: function(response){\r\n");
      out.write("        	\r\n");
      out.write("        	alert(\"나의 일정 추가완료\");\r\n");
      out.write("        	$(\"#content\").val(\"제목 : \");\r\n");
      out.write("		} \r\n");
      out.write("	})\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
