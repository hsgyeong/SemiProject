/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-21 01:47:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.tourReview;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import data.dao.MemberCommentDao;
import data.dto.MemberCommentDto;
import data.dto.MemberDto;
import data.dto.GuestDto;
import data.dao.MemberDao;
import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
import java.util.jar.Attributes.Name;
import javax.swing.text.html.parser.DTD;
import java.text.SimpleDateFormat;
import data.dto.TourReviewDto;
import java.util.List;
import data.dao.TourSpotReviewDao;

public final class tourSpotReviewList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.dto.GuestDto");
    _jspx_imports_classes.add("data.dao.TourSpotReviewDao");
    _jspx_imports_classes.add("data.dao.MemberDao");
    _jspx_imports_classes.add("data.dto.MemberCommentDto");
    _jspx_imports_classes.add("java.util.jar.Attributes.Name");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("data.dto.TourReviewDto");
    _jspx_imports_classes.add("data.dao.MemberCommentDao");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dto.MemberDto");
    _jspx_imports_classes.add("javax.swing.text.html.parser.DTD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link\r\n");
      out.write("   href=\"https://fonts.googleapis.com/css2?family=Cute+Font&family=Dongle:wght@300&family=Gamja+Flower&family=Gowun+Batang&family=Gowun+Dodum&family=Hi+Melody&family=Nanum+Gothic&family=Nanum+Gothic+Coding&family=Nanum+Pen+Script&family=Poor+Story&family=Sunflower:wght@300&display=swap\"\r\n");
      out.write("   rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("   href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"\r\n");
      out.write("   rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("   i{\r\n");
      out.write("      color: orange;\r\n");
      out.write("   }\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("   $(\"span.answer:eq(0)\").click(function() {\r\n");
      out.write("       \r\n");
      out.write("       // $(this).prev().toggle();\r\n");
      out.write("       //$(this).next().toggle()\r\n");
      out.write("       $(\"div.answer:eq(0)\").toggle();\r\n");
      out.write("       \r\n");
      out.write("     });\r\n");
      out.write("   $(\"span.answer:eq(1)\").click(function() {\r\n");
      out.write("       \r\n");
      out.write("       // $(this).prev().toggle();\r\n");
      out.write("       //$(this).next().toggle()\r\n");
      out.write("       $(\"div.answer:eq(1)\").toggle();\r\n");
      out.write("       \r\n");
      out.write("     });\r\n");
      out.write("   $(\"span.answer:eq(2)\").click(function() {\r\n");
      out.write("       \r\n");
      out.write("       // $(this).prev().toggle();\r\n");
      out.write("       //$(this).next().toggle()\r\n");
      out.write("       $(\"div.answer:eq(2)\").toggle();\r\n");
      out.write("       \r\n");
      out.write("     });\r\n");
      out.write("   $(\"span.answer\").click();\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function showStars(sv){\r\n");
      out.write("      var s=\"\";\r\n");
      out.write("      var empty=\"<i class='bi bi-star'>\";\r\n");
      out.write("      var half=\"<i class='bi bi-star-half'>\";\r\n");
      out.write("      var full=\"<i class='bi bi-star-fill'>\"\r\n");
      out.write("      if(sv==0){\r\n");
      out.write("         s+=empty+empty+empty+empty+empty;\r\n");
      out.write("      }\r\n");
      out.write("      else if(sv*2%2==0){\r\n");
      out.write("         for(var i=1;i<=sv;i++){\r\n");
      out.write("            s+=full;\r\n");
      out.write("         }\r\n");
      out.write("         for(var i=5;i>sv;i--){\r\n");
      out.write("            s+=empty;\r\n");
      out.write("         }\r\n");
      out.write("      }\r\n");
      out.write("      else{\r\n");
      out.write("         for(var i=1;i<sv;i++){\r\n");
      out.write("            s+=full;\r\n");
      out.write("         }\r\n");
      out.write("         s+=half;\r\n");
      out.write("         for(var i=4;i>sv;i--){\r\n");
      out.write("            s+=empty;\r\n");
      out.write("         }\r\n");
      out.write("      }\r\n");
      out.write("      return s;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");

//로그인 상태 확인후 입력폼 나타낼것_회원만 보이게
String loginok = (String) session.getAttribute("loginok");
TourSpotReviewDao dao = new TourSpotReviewDao();

// limchard 추가
String myid = (String) session.getAttribute("myid");
MemberDao MemberDao = new MemberDao();



int totalCount = dao.getTotalCount(); //전체갯수
int totalPage; //총 페이지수
int startPage; //각 블럭에서 보여질 시작페이지
int endPage; //각 블럭에서 보여질 끝페이지
int start; //db에서 가져올 글의 시작번호(mysql은 첫글이 0,오라클은 1)
int perpage = 3; //한 페이지당 보여질 글의갯수
int perBlock = 5; //한 페이지당 보여질 페이지 갯수
int currentPage; //현재 페이지
int no; //각페이지당 출력할 시작번호
int startNum; //각페이지에서 보여질 시작번호

//현재페이지 읽기(단 null일경우는 1페이지로 준다)계산을 해야하므로 int로 형변환해줌
if (request.getParameter("currentPage") == null)
   currentPage = 1;

else
   currentPage = Integer.parseInt(request.getParameter("currentPage"));

//총 페이지수 구하기
//총 글의갯수/한페이지당 보여질 개수로 나눔(7/5=1)
//나머지가 1이라도 있으면 무조건 1페이지 추가(1+1=2페이지)
totalPage = totalCount / perpage + (totalCount % perpage == 0 ? 0 : 1);

//각 블럭당 보여야할 시작페이지
//perBlock=5일경우는 현재페이지 1~5 시작:1 끝:5
//현재페이지 13 시작:11 끝:15
startPage = (currentPage - 1) / perBlock * perBlock + 1; // (12/5)*5 +1=11

endPage = startPage + perBlock - 1;

//총페이지가 23일경우 마지막블럭은 25가아니라 23이다
if (endPage > totalPage)
   endPage = totalPage;

//각페이지에서 보여질 시작번호
//1페이지: 0, 2페이지 :5, 3페이지 :10...
startNum = (currentPage - 1) * perpage;

//각페이지당 출력할 시작번호 구하기
//총글개수가 23이면 1페이지 23, 2 페이지 18, 3페이지 13......
//no=totalCount-(currentPage-1)*perPage;
no = totalCount - startNum;

//각페이지 필요한 게시글 자겨오기
List<TourReviewDto> list = dao.getList(startNum, perpage);

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

//마지막 페이지 남은 한개글 지우면 빈페이지만 남는다.(해결책)이전페이지로간다

if (list.size() == 0 && currentPage != 1) {
   
   response.sendRedirect("index.jsp?main=tourReview/tourReviewList.jsp?currentPage="+(currentPage-1));
}

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("   ");

      if(loginok!=null)
      {
   
      out.write("\r\n");
      out.write("   ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "tourSpotReviewForm.jsp", out, false);
      out.write("\r\n");
      out.write("   <hr align=\"left\" style=\"margin-left: 230px; width:1000px;\">\r\n");
      out.write("   ");

      }else{
   
      out.write("\r\n");
      out.write("   ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "logoutTourSpotReviewForm.jsp", out, false);
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   <hr align=\"left\" width=\"700px;\">\r\n");
      out.write("   ");

      }
   
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   ");

   TourSpotReviewDao tourspotreviewdao = new TourSpotReviewDao();
   List<TourReviewDto> tourreviewlist = dao.getAllTourReviews();
   if (tourreviewlist.size() == 0) {
   
      out.write("\r\n");
      out.write("   <br>\r\n");
      out.write("      <br>\r\n");
      out.write("      <br>\r\n");
      out.write("      <br>\r\n");
      out.write("   <div style=\"margin-left: 600px;\">\r\n");
      out.write("      <b>게시글이 없습니다.</b>\r\n");
      out.write("       <br> <br> <br>\r\n");
      out.write("      \r\n");
      out.write("            \r\n");
      out.write("            <table class=\"table table-bordered\" style=\"margin-top: 300px; \">\r\n");
      out.write("            ");

            } else {
            
      out.write("\r\n");
      out.write("            <div style=\"margin-top: 150px;\"></div>\r\n");
      out.write("            ");

            for (int i = 0; i < list.size(); i++) {
               TourReviewDto tourreviewdto = list.get(i);
            
      out.write("\r\n");
      out.write("            <div class=\"table table-bordered\"\r\n");
      out.write("               style=\"width: 1135px; margin-left: 180px; padding: 20px; \">\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <div class=\"row\">\r\n");
      out.write("                     <div class=\"col-md-8\">\r\n");
      out.write("                        ");
      out.print(no--);
      out.write("\r\n");
      out.write("                        <a style=\"font-size: 0.9em\">&nbsp;&nbsp;<i\r\n");
      out.write("                           class=\"bi bi-person-circle\" style=\"font-size: 30px;\"></i>&nbsp;&nbsp;&nbsp;");
      out.print(tourreviewdto.getId());
      out.write("</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("                        <a><b>&nbsp;&nbsp;");
      out.print(tourreviewdto.getTitle());
      out.write("</b></a>\r\n");
      out.write("                        ");
double sv=tourreviewdto.getStars()!=null?Double.parseDouble(tourreviewdto.getStars()):0;
      out.write("\r\n");
      out.write("                     <div data-index=\"");
      out.print( i );
      out.write("\" class=\"d\">\r\n");
      out.write("                  <script>\r\n");
      out.write("                  var starsHtml = showStars(");
      out.print(sv);
      out.write(");\r\n");
      out.write("                  var divs = document.querySelectorAll('div.d');\r\n");
      out.write("                     divs.forEach(function(div) {\r\n");
      out.write("                         var dataIndex = div.getAttribute('data-index');\r\n");
      out.write("                         if (dataIndex == ");
      out.print(i);
      out.write(") {\r\n");
      out.write("                            div.innerHTML = starsHtml;\r\n");
      out.write("                         }\r\n");
      out.write("                         });\r\n");
      out.write("                  </script>\r\n");
      out.write("                     </div>\r\n");
      out.write("                     </div>\r\n");
      out.write("                     <div class=\"col-md-4 text-end\">\r\n");
      out.write("                        <td>\r\n");
      out.write("                           <div float=\"right;\">\r\n");
      out.write("                            ");

                        //수정 삭제는 로그인 중이면서 로그인한 아이디와 같은 경우만 보이게
                        if(loginok!=null&&tourreviewdto.getId().equals(myid)){
      out.write(" \r\n");
      out.write("                         <a href=\"tourReview/tourSpotReviewDelete.jsp?num=");
      out.print(tourreviewdto.getCom_seq());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write("\"\r\n");
      out.write("                       style=\"color: red\"><i class=\"bi bi-trash3 del\" style=\"color: red; cursor: pointer; float:right; font-size:20px\" com_seq=");
      out.print(tourreviewdto.getCom_seq() );
      out.write("></i></a>\r\n");
      out.write("                     <a href=\"index.jsp?main=tourReview/tourSpotReviewUpdateForm.jsp?num=");
      out.print(tourreviewdto.getCom_seq());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write("\"\r\n");
      out.write("                     style=\"color: green\"><i class=\"bi bi-pencil-square up\"  style=\"color: green; cursor: pointer; float:right; font-size:20px\" com_seq=");
      out.print(tourreviewdto.getCom_seq() );
      out.write("></i></a>\r\n");
      out.write("                      ");
}
      out.write("\r\n");
      out.write("                              <span class=\"likes\"><a style=\"font-size: 0.7em; color: gray;\">좋아요</a>&nbsp;<i\r\n");
      out.write("                                 class=\"bi bi-hand-thumbs-up\" style=\"color: gray;\"></i>&nbsp;&nbsp;&nbsp;");
      out.print(tourreviewdto.getLikes());
      out.write("</span>\r\n");
      out.write("                              <a style=\"font-size: 0.7em; color: gray;\">작성일&nbsp;");
      out.print(sdf.format(tourreviewdto.getWriteday()));
      out.write("</a>&nbsp;&nbsp;\r\n");
      out.write("                              <a style=\"font-size: 0.7em; color: gray;\">조회수&nbsp;");
      out.print(tourreviewdto.getViewcount());
      out.write("</a>\r\n");
      out.write("                           </div>\r\n");
      out.write("                        </td>\r\n");
      out.write("                     </div>\r\n");
      out.write("\r\n");
      out.write("                     <br>\r\n");
      out.write("                        <tr class=\"photo\">\r\n");
      out.write("                        <td>");
      out.print(tourreviewdto.getPhoto());
      out.write("</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                     <br>\r\n");
      out.write("                     <td>내용&nbsp;&nbsp;");
      out.print(tourreviewdto.getContent());
      out.write("</td> <br> <br>\r\n");
      out.write("                     <br>\r\n");
      out.write("                     </div>\r\n");
      out.write("            </tr>\r\n");
      out.write("            </div>\r\n");
      out.write("           \r\n");
      out.write("            \r\n");
      out.write("               <tr>\r\n");
      out.write("            <td>\r\n");
      out.write("      ");
   String com_seq = tourreviewdto.getCom_seq();
         MemberCommentDao Dao = new MemberCommentDao();
         List<MemberCommentDto> memberCommentlist=Dao.getAllMemberComments(com_seq);
      
      out.write(" \r\n");
      out.write("      \r\n");

if(loginok!=null){

      out.write("\r\n");
      out.write("               <div class=\"commentform\" style=\"margin-left: 180px\">\r\n");
      out.write("                  <form action=\"tourReview/memberCommentInsert.jsp\" method=\"post\">\r\n");
      out.write("                     <table class=\"table table-bordered\" style=\"width:1000px;\" id=\"id");
      out.print(com_seq);
      out.write("\">\r\n");
      out.write("                        <tr>\r\n");
      out.write("                           <td><textarea style=\"width: 1000px; height: 100px\"\r\n");
      out.write("                                 name=\"content\" required=\"required\" class=\"form-control\"></textarea>\r\n");
      out.write("                           </td>\r\n");
      out.write("                           <td>\r\n");
      out.write("                              <button type=\"submit\" class=\"btn btn-outline-dark\" style=\"width: 100px;height: 100px\">등록</button> <input\r\n");
      out.write("                              type=\"hidden\" name=\"com_seq\" value=\"");
      out.print(tourreviewdto.getCom_seq() );
      out.write("\">\r\n");
      out.write("                              <input type=\"hidden\" name=\"id\" value=\"");
      out.print(myid );
      out.write("\">\r\n");
      out.write("                              <input type=\"hidden\" name=\"currentPage\" value=\"");
      out.print(currentPage );
      out.write("\">\r\n");
      out.write("                           </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                     </table>\r\n");
      out.write("                  </form>\r\n");
      out.write("                  <span class=\"answer\" style=\"cursor: pointer;\"\r\n");
      out.write("               num=");
      out.print(tourreviewdto.getCom_seq());
      out.write(">&nbsp;&nbsp;&nbsp;\r\n");
      out.write("      <i class=\"bi bi-chat-dots-fill\" id=\"id");
      out.print(tourreviewdto.getCom_seq() );
      out.write("\" style=\"\"></i>&nbsp;&nbsp;댓글 ");
      out.print(memberCommentlist.size() );
      out.write("</span>\r\n");
      out.write("               </div> \r\n");
      out.write("               \r\n");
      out.write("               ");

            }
               
      out.write("\r\n");
      out.write("               \r\n");
      out.write("            </td>\r\n");
      out.write("         </tr>\r\n");
      out.write("\r\n");
      out.write("         <tr>\r\n");
      out.write("         <td>\r\n");
      out.write("         \r\n");
      out.write("            ");
MemberCommentDao memberCommentDao = new MemberCommentDao();
               List<MemberCommentDto> mcList = memberCommentDao.getAllMemberComments(com_seq);
               MemberDao memberDao = new MemberDao();
               System.out.println(com_seq);
               System.out.println(mcList.size());
      out.write("\r\n");
      out.write("               \r\n");
      out.write("               <div class=\"answer\" style=\"margin-left: 180px\">\r\n");
      out.write("            <table class=\"table\" style=\"width:1118px;\">\r\n");
      out.write("               ");

                  for(MemberCommentDto m : mcList){ 
      out.write("\r\n");
      out.write("                     <tr>\r\n");
      out.write("                     <!-- <td width=\"60\">\r\n");
      out.write("                     <i class=\"bi bi-person-circle\"></i>\r\n");
      out.write("                     </td> -->\r\n");
      out.write("                     <td>\r\n");
      out.write("                     <i class=\"bi bi-person-circle\"></i>\r\n");
      out.write("                     ");

                     
                     //작성자명
                     String name = memberDao.getName(myid);
                     System.out.println(myid);
                     System.out.println(name);
                     
      out.write("\r\n");
      out.write("                     \r\n");
      out.write("                     <b>");
      out.print(memberDao.getName(m.getId())  );
      out.write("</b>\r\n");
      out.write("                     &nbsp;\r\n");
      out.write("                     ");

                     //글쓴이와 댓글 쓴이가 같을 경우 [작성자]
                     if(myid.equals(m.getId())){      
                     
      out.write("\r\n");
      out.write("                     <b><span style=\"color:red; border:1px solid red; border-radius:20px; font-size:8pt\">작성자</span></b>\r\n");
      out.write("                     ");
} 
      out.write("\r\n");
      out.write("                     \r\n");
      out.write("                     <span style=\"font-size:9pt;color:gray;margin-left:20px\">");
      out.print(sdf.format(m.getWriteday()) );
      out.write("</span>\r\n");
      out.write("                     <br>\r\n");
      out.write("                     <span class=\"scontent\">");
      out.print(m.getMembercomment().replace("\n","<br>") );
      out.write("</span>\r\n");
      out.write("                     ");

                        //수정 삭제는 로그인 중이면서 로그인한 아이디와 같은 경우만 보이게
                        if(loginok!=null&&m.getId().equals(myid)){
      out.write("\r\n");
      out.write("                        <i class=\"bi bi-trash3 adel\" style=\"color: red; cursor: pointer; float:right; font-size:20px\" com_seq=");
      out.print(m.getCom_seq() );
      out.write("></i>\r\n");
      out.write("                        <i class=\"bi bi-pencil-square aup\" data-bs-toggle=\"modal\" style=\"color: green; cursor: pointer; float:right; font-size:20px\" com_seq=");
      out.print(m.getCom_seq() );
      out.write("></i>\r\n");
      out.write("                     ");
}
      out.write("\r\n");
      out.write("                     </td>\r\n");
      out.write("                     </tr>\r\n");
      out.write("                  ");
}
               
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            </div>\r\n");
      out.write("         \r\n");
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("            ");
 
            }
            }
   
      out.write("\r\n");
      out.write("   ");

   
                        TourReviewDto tourreviewdto = new TourReviewDto();
                        String com_seq=request.getParameter("com_seq");
                              //로그인한 아이디
                              /* String id=(String)session.getAttribute("id"); */
                              String reviewId = tourspotreviewdao.getId(com_seq);
                           
                           //로그인한 아이디와 글쓴아이디가 같을 경우에만 수정, 삭제
                           if(reviewId!=null&&myid.equals("admin"))
                           {  /* reviewId.equals(id)|| */
               
      out.write("\r\n");
      out.write("               ");
 
                             }
 
      out.write(' ');
      out.write("\r\n");
      out.write("         </tr>\r\n");
      out.write("\r\n");
      out.write("      \r\n");
      out.write("         <!--페이지번호 출력-->\r\n");
      out.write("      <br>\r\n");
      out.write("      <br>\r\n");
      out.write("      <br>\r\n");
      out.write("      <div align=\"bottom\">\r\n");
      out.write("         <ul class=\"pagination justify-content-center\">\r\n");
      out.write("            <li class=\"page-item\"><a class=\"page-link\"\r\n");
      out.write("               href=\"index.jsp?main=tourReview/tourSpotReviewList.jsp?currentPage=");
      out.print(startPage - 1);
      out.write("\"\r\n");
      out.write("               aria-label=\"Previous\"> <span aria-hidden=\"true\">&laquo;</span>\r\n");
      out.write("            </a></li>\r\n");
      out.write("            ");

            //이전
            if (startPage > 1) {
            
      out.write("\r\n");
      out.write("         <li class=\"page-item active\">\r\n");
      out.write("             <a class=\"page-link\" href=\"index.jsp?main=tourReview/tourSpotReviewList.jsp?currentPage=");
      out.print(currentPage-1);
      out.write("\"><span aria-hidden=\"true\">&laquo;</span></a>\r\n");
      out.write("               ");

            }

            for (int pp = startPage; pp <= endPage; pp++) 
            {
            if (pp == currentPage) {
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <li class=\"page-item active\"><a class=\"page-link\"\r\n");
      out.write("               href=\"index.jsp?main=tourReview/tourSpotReviewList.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp);
      out.write("</a></li>\r\n");
      out.write("            ");

            } else {
            
      out.write("\r\n");
      out.write("            <li class=\"page-item\"><a class=\"page-link\"\r\n");
      out.write("               href=\"index.jsp?main=tourReview/tourSpotReviewList.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp);
      out.write("</a></li>\r\n");
      out.write("            ");

            }
            }
            if (endPage < totalPage) {
               
      out.write("\r\n");
      out.write("            <li class=\"page-item\">\r\n");
      out.write("            <a class=\"page-link\" aria-label=\"Next\"\r\n");
      out.write("               href=\"index.jsp?main=tourReview/tourSpotReviewList.jsp?currentPage=");
      out.print(endPage+1 );
      out.write("\"><span aria-hidden=\"true\">&raquo;</span></a>\r\n");
      out.write("            </li>\r\n");
      out.write("\r\n");
      out.write("            ");

            }
 
      out.write("\r\n");
      out.write("\r\n");
      out.write("         </ul>\r\n");
      out.write("      </div>\r\n");
      out.write("  \r\n");
      out.write("   \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
